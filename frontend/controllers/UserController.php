<?php

namespace frontend\controllers;

use Yii;
use yii\base\DynamicModel;
use yii\base\InvalidParamException;
use yii\filters\VerbFilter;
use yii\filters\AccessControl;
use yii\web\ForbiddenHttpException;
use yii\web\HttpException;
use yii\web\Response;
use yii\web\BadRequestHttpException;
use yii\web\UploadedFile;
use yii\bootstrap\ActiveForm;
use common\helpers\Functions;
use common\models\Users;
use common\models\MailTemplatesStatic;
use common\models\Preferences;
use common\models\Sessions;
use common\models\Servers;
use common\models\UserFiles;
use common\models\Licenses;
use common\models\UserNode;
use common\models\Software;
use common\models\UserActionsLog;
use common\models\UserColleagues;
use common\models\UserLicenses;
use common\models\BadLogins;
use frontend\components\SController;
use frontend\models\LoginFictive;
use frontend\models\JsTreeMy;
use frontend\models\NodeApi;
use frontend\models\ConferenceApi;
use frontend\models\RestorePatchApi;
use frontend\models\forms\PasswordResetRequestForm;
use frontend\models\forms\ResetPasswordForm;
use frontend\models\forms\LoginForm;
use frontend\models\forms\SignupForm;
use frontend\models\forms\SignupForm2;
use frontend\models\forms\ChangeEmailForm;
use frontend\models\forms\ChangeNameForm;
use frontend\models\forms\ChangePasswordForm;
use frontend\models\forms\SetTimeZoneOffsetForm;
use frontend\models\forms\ShareElementForm;
use frontend\models\forms\UploadFilesForm;
use frontend\models\forms\SupportForm;
use frontend\models\forms\BillingSettingsForm;
use frontend\models\forms\LogAlertDataForm;
use frontend\models\forms\ConferenceAddForm;
use frontend\models\forms\ParticipantAddForm;
use frontend\models\search\SessionsSearch;
use frontend\models\search\UserNodeSearch;
use frontend\models\search\NotificationsSearch;
use frontend\models\search\ColleaguesReportsSearch;
use frontend\models\search\UserPaymentsSearch;
use frontend\models\search\TrafSearch;
use frontend\models\search\ConferencesSearch;

/**
 * UserController
 *
 * @property \frontend\models\forms\LoginForm $model_login
 */
class UserController extends SController
{
    /** @var \frontend\models\forms\LoginForm $model_login */
    public $model_login;

    public $special_access_actions = [
        'logout-and-wipe',
        'change-collaboration-access',
        'cancel-collaboration',
        'conferences',
    ];

    /**
     * @inheritdoc
     */
    public function init()
    {
        parent::init(); // TO-DO: Change the autogenerated stub
        $this->model_login  = new LoginForm();
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'rules' => [

                    /* Акшены которые доступны всем */
                    [
                        'actions' => [
                            'check-site-token',
                            'confirm-registration',
                            'accept-collaboration',
                            'login-by-token',
                        ],
                        'allow' => true,
                        'roles' => ['?', '@'],
                    ],

                    /* Акшены которые доступны только неавторизованым (гостям) */
                    [
                        'actions' => [
                            'login',
                            'signup',
                            'signup2',
                            'request-password-reset',
                            'reset-change-password',
                            //'fictive-login',
                        ],
                        'allow' => true,
                        'roles' => ['?'],
                    ],

                    /* Акшены которые доступны только авторизованным */
                    [
                        'actions' => [
                            'license-restriction',
                            'index',

                            'logout',
                            'delete-account',

                            'profile',
                            'change-password',
                            'resend-confirm',
                            'change-billing-period',
                            'change-pay-type',
                            'set-timezone-offset',

                            'notifications',
                            'count-new-notifications',
                            'set-notifications-as-read',
                            'set-reports-as-read',

                            'files',
                            'add-files',
                            'restore-patch',
                            'share-send-to-email',
                            'leave-collaboration',
                            'resend-invite',
                            //'change-collaboration-access',
                            //'cancel-collaboration',

                            'devices',
                            'devices-log',
                            'set-node-hidden',
                            //'logout-and-wipe',


                            'alert-dialogs',
                            'register-alert-data',
                            'get-user-license'
                        ],
                        'allow' => true,
                        'roles' => ['@'],
                    ],

                    /* Акшены которые доступны только авторизованным и имеют дополнительные условия доступа */
                    [
                        'actions' => $this->special_access_actions,
                        'allow' => true,
                        'matchCallback' => function($rule, $action) {
                            if ($this->User->license_type == Licenses::TYPE_FREE_DEFAULT) {
                                //$rule->allow = false;
                                return false;
                            }
                            return true;
                        },
                        'roles' => ['@'],
                    ],

                ],
                'denyCallback' => function($rule, $action) {
                    if (in_array($action->id, $this->special_access_actions) && !in_array($action->id, ['conferences'])) {
                        if (!$this->User) {
                            return $this->redirect(['/']);
                        } else {
                            return $this->redirect(['/user/license-restriction']);
                        }
                    } else {
                        if (!$this->User) {
                            //return Yii::$app->user->loginRequired();
                            return $this->redirect(['/']);
                        } else {
                            throw new ForbiddenHttpException(Yii::t('yii', 'You are not allowed to perform this action.'));
                        }
                    }
                },
            ],
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'logout' => ['post', 'get'],
                    'delete-account' => ['post'],
                ],
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function beforeAction($action)
    {
        if ($action->id === 'add-files') {
            $this->enableCsrfValidation = false;
        }

        return parent::beforeAction($action);
    }

    /**
     * @inheritdoc
     */
    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
            'captcha' => [
                'class' => 'yii\captcha\CaptchaAction',
                'fixedVerifyCode' => YII_ENV_TEST ? 'testme' : null,
            ],
        ];
    }




    /** Акшены которые доступны всем */
    /**
     * Проверяет валидность site-token,
     * который используется для соединения с вебсокетом
     * @return array
     */
    public function actionCheckSiteToken()
    {
        Yii::$app->response->format = Response::FORMAT_JSON;

        if (Yii::$app->user->isGuest) {
            return [
                'result'  => "error",
                'errcode' => NodeApi::ERROR_TOKEN_INVALID,
                'info'    => "You are not logged",
            ];
        }

        $model = new NodeApi(['site_token']);
        if (!$model->load(['NodeApi' => $_POST]) || !$model->validate()) {
            return [
                'result'  => "error",
                'errcode' => NodeApi::ERROR_WRONG_DATA,
                'info'    => $model->getErrors()
            ];
        }

        return $model->check_site_token();
    }

    /**
     * Display Confirm registration page
     * @return mixed
     */
    public function actionConfirmRegistration()
    {
        if (!Yii::$app->user->isGuest) {
            /** @var \common\models\Users $testUser */
            $testUser = Yii::$app->user->identity;
            if ($testUser->user_status == Users::STATUS_CONFIRMED) {
                Yii::$app->session->setFlash('error', [
                    'message'   => Yii::t('app/flash-messages', 'ConfirmRegistrationAlreadyExist'),
                    'ttl'       => FLASH_MESSAGES_TTL,
                    'showClose' => true,
                    'alert_action' => 'actionConfirmRegistration',
                ]);
                return $this->goHome();
            }
        }

        $model = new DynamicModel(['token']);
        $model->addRule('token', 'required');
        $model->addRule('token', 'string', ['min'=>6, 'max'=>255]);
        if ($model->load(['ConfirmRegistration' => $_GET], 'ConfirmRegistration') && $model->validate()) {
            $user = Users::findByPasswordResetToken($model->token, true);
            //var_dump($user); exit;
            if ($user) {
                $user->user_status = Users::STATUS_CONFIRMED;
                $user->removePasswordResetToken();
                if ($user->save()) {
                    Yii::$app->session->setFlash('success', [
                        'message'   => Yii::t('app/flash-messages', 'ConfirmRegistration_success'),
                        'ttl'       => FLASH_MESSAGES_TTL,
                        'showClose' => true,
                        'alert_action' => 'actionConfirmRegistration',
                    ]);
                    MailTemplatesStatic::sendByKey(MailTemplatesStatic::template_key_SetupDevices, $user->user_email, ['UserObject' => $user]);
                    if (Yii::$app->user->isGuest) {
                        UserActionsLog::saveUserActionData($user->user_id);
                        return $this->redirect('/');
                    } else {
                        return $this->redirect(['files']);
                    }
                }
            }
        }
        Yii::$app->session->setFlash('error', [
            'message'   => Yii::t('app/flash-messages', 'ConfirmRegistration_error'),
            'ttl'       => FLASH_MESSAGES_TTL,
            'showClose' => true,
            'alert_action' => 'actionConfirmRegistration',
        ]);
        return $this->goHome();
    }




    /** Акшены которые доступны только неавторизованым (гостям) */
    /**
     * Logs in a user.
     * @return string|Response
     * @throws HttpException
     */
    public function actionLogin()
    {
        try {
            if ($this->model_login->load(Yii::$app->request->post()) && $this->model_login->validate()) {

                if ($this->model_login->login()) {

                    //return $this->goBack();
                    /* акцепт коллабораций */
                    $_GET['colleague_id'] = Yii::$app->session->get('is_from_guest_colleague_id');
                    if ($_GET['colleague_id']) {
                        return $this->actionAcceptCollaboration();
                    }

                    /* акцепт конференций */
                    $_GET['participant_id'] = Yii::$app->session->get('is_from_guest_participant_id');
                    if ($_GET['participant_id']) {
                        return $this->redirect(['conferences/accept-invitation', 'participant_id' => $_GET['participant_id']]);
                    }

                    /**/
                    $_test_after_signup_login_redirect_to = Yii::$app->session->get('after_signup_login_redirect_to');
                    if ($_test_after_signup_login_redirect_to) {
                        $redir = $_test_after_signup_login_redirect_to;
                    } else {
                        $redir = '/user/files';
                    }
                    //return $this->redirect('/user/files');
                    return $this->redirect($redir);

                } else {

                    throw new HttpException(400, 'Failed save data.');

                }

            } else {

                $cnt = Yii::$app->cache->get(Yii::$app->params['LoginCacheKey']);
                if (!$cnt) {
                    $cnt = 1;
                } else {
                    $cnt++;
                }
                Yii::$app->cache->set(Yii::$app->params['LoginCacheKey'], $cnt);

            }
        } catch (Yii\base\Exception $e) {
            throw new HttpException(400, 'Wrong data transmitted.');
        }

        return $this->render('/site/index', [
            'model' => $this->model_login,
            'model_signup2' => new SignupForm2(),
            'software' => Software::findOtherVersionSoftware(),
            'traf' => Yii::$app->params['self_hosted'] ? null: TrafSearch::search(),
        ]);
    }

    /**
     * Метод который используется акшенами actionSignup() и actionSignup2()
     * что бы не повторять код дважды
     * @param \frontend\models\forms\SignupForm|\frontend\models\forms\SignupForm2 $model
     * @return array
     * @throws BadRequestHttpException
     * @throws HttpException
     */
    private function methodSignup(&$model)
    {
        if ($model->load(Yii::$app->request->post())) {

            /* IP */
            $ip = null;
            $ip = Yii::$app->request->getUserIP();
            if (!$ip) { $ip = isset($_SERVER['REMOTE_ADDR']) ? $_SERVER['REMOTE_ADDR'] : null; }
            if (!$ip) { $ip = '127.0.0.1'; }

            /* тут проверка что не было лока по ИП для метода логина по емейл + пароль */
            /* это будет метод, который проверяет нет ли лока для данного ИП */
            $bl_ret = BadLogins::checkIsIpLocked($ip, BadLogins::TYPE_LOCK_VALIDATE);
            if ($bl_ret['status']) {
                Yii::$app->response->format = Response::FORMAT_JSON;
                return [
                    'result'  => "error",
                    'errcode' => "LOCKED_CAUSE_TOO_MANY_BAD_TRIES",
                    'info'    => $bl_ret['info'],
                    'data'    => $bl_ret['data'],
                ];
            }

            /**/
            if ($model->validate()) {

                if (Yii::$app->params['self_hosted']) {
                    $check_user_email = isset($model->user_email) ? $model->user_email : $model->user_email2;
                    if (!$check_user_email || !UserColleagues::findOne(['colleague_email' => $check_user_email])) {
                        Yii::$app->session->setFlash('error', [
                            'message' => Yii::t('app/flash-messages', 'SomeErrorOnJoinCollaborationWithThisEmail'),
                            'ttl' => FLASH_MESSAGES_TTL,
                            'showClose' => true,
                            'alert_action' => 'methodSignup',
                        ]);
                        return ['/'];
                    }
                }

                $user = $model->signup();
                if ($user) {
                    if (Yii::$app->user->login($user)) {
                        $cnt = Yii::$app->cache->get(Yii::$app->params['RegisterCacheKey']);
                        if (!$cnt) {
                            $cnt = 1;
                        } else {
                            $cnt++;
                        }
                        Yii::$app->cache->set(Yii::$app->params['RegisterCacheKey'], $cnt);

                        /* акцепт коллабораций */
                        $_test_is_from_guest_colleague_id = Yii::$app->session->get('is_from_guest_colleague_id');
                        if ($_test_is_from_guest_colleague_id) {
                            $model = new ShareElementForm(['colleague_id']);
                            if ($model->load(['ShareElementForm' => ['colleague_id' => $_test_is_from_guest_colleague_id]]) && $model->validate()) {
                                $ret = $model->acceptCollaboration();
                                //var_dump($ret); exit;
                                if ($ret['status']) {
                                    Yii::$app->session->setFlash('success', [
                                        'message' => Yii::t('app/flash-messages', 'YourJoinIsAcceptedYouAreQueuedToAdd'),
                                        'ttl' => FLASH_MESSAGES_TTL,
                                        'showClose' => true,
                                        'alert_action' => 'methodSignup',
                                    ]);
                                } else {
                                    if (!isset($ret['hidden_info'])) {
                                        Yii::$app->session->setFlash('error', [
                                            'message' => Yii::t('app/flash-messages', (isset($ret['info']) ? $ret['info'] : 'SomeErrorOnJoinCollaboration')),
                                            'ttl' => FLASH_MESSAGES_TTL,
                                            'showClose' => true,
                                            'alert_action' => 'methodSignup',
                                        ]);
                                    }
                                }
                            }
                        }

                        /* акцепт конференций */
                        $_test_is_from_guest_participant_id = Yii::$app->session->get('is_from_guest_participant_id');
                        if ($_test_is_from_guest_participant_id) {
                            $model_conf = new ConferenceApi(['participant_id']);
                            if ($model_conf->load(['ConferenceApi' => ['participant_id' => $_test_is_from_guest_participant_id]]) && $model_conf->validate()) {
                                $ret_conf = $model_conf->acceptInvitation();
                                if ($ret_conf['status']) {
                                    Yii::$app->session->setFlash('success', [
                                        'message' => Yii::t('app/flash-messages', isset($ret_conf['info']) ? $ret_conf['info'] : 'YourJoinToConferenceIsAccepted'),
                                        'ttl' => FLASH_MESSAGES_TTL,
                                        'showClose' => true,
                                        'alert_action' => 'actionAcceptInvitation',
                                        'type' => isset($ret_conf['type']) ? $ret_conf['type'] : 'success',
                                    ]);
                                } else {
                                    Yii::$app->session->setFlash('error', [
                                        'message' => Yii::t('app/flash-messages', (isset($ret_conf['info']) ? $ret_conf['info'] : 'SomeErrorOnJoinConference')),
                                        'ttl' => FLASH_MESSAGES_TTL,
                                        'showClose' => true,
                                        'alert_action' => 'actionAcceptInvitation',
                                        'type'      => 'error',
                                    ]);
                                }
                            }
                        }

                        /**/
                        $_test_after_signup_login_redirect_to = Yii::$app->session->get('after_signup_login_redirect_to');
                        if ($_test_after_signup_login_redirect_to) {
                            return $_test_after_signup_login_redirect_to;
                        } else {
                            return ['/download/install'];
                        }
                    }
                } else {

                    throw new HttpException(400, 'Failed save data.');

                }

            } else {

                BadLogins::setDataForIP($ip, BadLogins::TYPE_LOCK_VALIDATE);
                return ['/'];
                //throw new BadRequestHttpException('Wrong form data');

            }
        }

        return ['/'];
    }

    /**
     * Signup user from popup
     * @return mixed
     */
    public function actionSignup()
    {
        $model = new SignupForm;

        if (Yii::$app->request->isAjax && $model->load(Yii::$app->request->post())) {
            Yii::$app->response->format = Response::FORMAT_JSON;
            return ActiveForm::validate($model);
        }

        $ret = $this->methodSignup($model);

        return $this->redirect($ret);
    }

    /**
     * Signup user from index
     * @return mixed
     */
    public function actionSignup2()
    {
        $model = new SignupForm2;

        if (Yii::$app->request->isAjax && $model->load(Yii::$app->request->post())) {
            Yii::$app->response->format = Response::FORMAT_JSON;
            return ActiveForm::validate($model);
        }

        $ret = $this->methodSignup($model);

        return $this->redirect($ret);
    }

    /**
     * Requests password reset.
     * @return array|Response
     * @throws BadRequestHttpException
     */
    public function actionRequestPasswordReset()
    {
        $model = new PasswordResetRequestForm();

        $cnt = Yii::$app->cache->get(Yii::$app->params['ResetPasswordCacheKey']);
        if (!$cnt) { $cnt = 1; } else { $cnt++; }
        Yii::$app->cache->set(Yii::$app->params['ResetPasswordCacheKey'], $cnt);

        if (Yii::$app->request->isAjax && $model->load(Yii::$app->request->post())) {
            Yii::$app->response->format = Response::FORMAT_JSON;
            return ActiveForm::validate($model);
        }

        if ($model->load(Yii::$app->request->post()) && $model->validate()) {
            //if ($model->load(Yii::$app->request->post())) {

            //var_dump($model->sendEmail()); exit;
            if ($model->sendEmail()) {
                Yii::$app->session->setFlash('success', [
                    'message'   => Yii::t('forms/reset-password-form', 'Instructions_recovery_sent'),
                    'ttl'       => FLASH_MESSAGES_TTL,
                    'showClose' => true,
                    'alert_action' => 'actionRequestPasswordReset',
                ]);
                return $this->redirect('/site?request-reset-sent');
            } else {
                /*
                Yii::$app->session->setFlash('error', [
                    'message'   => Yii::t('app/flash-messages', 'RequestPasswordReset_error'),
                    'ttl'       => FLASH_MESSAGES_TTL,
                    'showClose' => true,
                    'alert_action' => 'actionRequestPasswordReset',
                ]);
                */
                return $this->redirect('/site?reset-password-error');
            }
        }

        return $this->redirect('/site?reset-password-error');
        //throw new BadRequestHttpException('Wrong form data');
        //return $this->redirect('/');
        //return $this->redirect('/site?email-not-found');
    }

    /**
     * Resets password.
     * @param string $token
     * @return mixed
     * @throws BadRequestHttpException
     */
    public function actionResetChangePassword($token)
    {
        try {
            $model = new ResetPasswordForm($token);
        } catch (InvalidParamException $e) {
            throw new BadRequestHttpException($e->getMessage());
        }

        if ($model->load(Yii::$app->request->post()) && $model->validate() && $model->resetPassword()) {
            Yii::$app->session->setFlash('success', [
                'message'   => Yii::t('app/flash-messages', 'ResetChangePassword_success'),
                'ttl'       => FLASH_MESSAGES_TTL,
                'showClose' => true,
                'alert_action' => 'actionResetChangePassword',
            ]);

            return $this->goHome();
        }

        return $this->render('reset-change-password', [
            'model' => $model,
        ]);
    }

    /**
     * Remote login by token
     */
    public function actionLoginByToken()
    {
        $model = new DynamicModel(['token']);
        $model->addRule('token', 'required');
        $model->addRule('token', 'string', ['min'=>6, 'max'=>255]);
        if ($model->load(['LoginByToken' => $_GET], 'LoginByToken') && $model->validate()) {
            if (Users::isLoginTokenValid($model->token)) {
                Yii::$app->user->logout();
                $user = Users::findByPasswordResetToken($model->token, false);
                //var_dump($user); exit;
                if ($user) {
                    $user->removePasswordResetToken();
                    if ($user->save()) {

                        $UserNode = NodeApi::registerNodeFM($user);
                        if ($UserNode) {
                            $UserNode->node_online = UserNode::ONLINE_ON;
                            $UserNode->node_useragent = Yii::$app->request->getUserAgent();
                            $UserNode->node_osname = Functions::getOsExtendedByUserAgent($UserNode->node_useragent);
                            $UserNode->node_ostype = Functions::getOsTypeByUserAgent($UserNode->node_useragent);
                            $UserNode->save();
                        }

                        Yii::$app->user->login($user, 0);
                        return $this->redirect(['files']);
                    }
                }
            }
        }
        Yii::$app->session->setFlash('error', [
            'message'   => Yii::t('app/flash-messages', 'LoginByToken_error'),
            'ttl'       => FLASH_MESSAGES_TTL,
            'showClose' => true,
            'alert_action' => 'actionLoginByToken',
        ]);
        return $this->goHome();
    }

    /**
     * Logs in a fictive user from admin.
     * @return mixed
     */
    public function actionFictiveLogin()
    {
        if (isset($_GET['fu_id'], $_GET['fu_hs'])) {

            Yii::$app->user->logout();

            $model = new LoginFictive();
            $model->fu_id = $_GET['fu_id'];
            $model->fu_hs = $_GET['fu_hs'];
            //$model->fictiveLogin();
        }

        return $this->goHome();
    }




    /** Акшены которые доступны только авторизованным и (или) имеют дополнительные условия доступа */
    /*********/
    /**
     * Акшен отобразит страницу о том что
     * акшены недоступны при такой лицензии.
     * @return string
     */
    public function actionLicenseRestriction()
    {
        Yii::$app->response->format = Response::FORMAT_JSON;
        return [
            'status' => false,
            'info' => 'license-restriction',
        ];
    }

    /**
     * Покажет страницу профиля пользователя ( тоже самое что и /user/profile )
     * @return string
     */
    public function actionIndex()
    {
        return $this->actionProfile();
    }

    /**
     * Logs out the current user.
     * @return mixed
     */
    public function actionLogout()
    {
        $user_id = $this->User->user_id;
        if ($user_id) {
            $session = new Sessions();
            $session->user_id = $user_id;
            $session->sess_action = Sessions::ACTION_LOGOUT;
            $session->save();
        }

        Yii::$app->user->logout();
        return $this->redirect('/entrance');
    }

    /**
     * Помечает аккаунт как удаленный
     * @throws \yii\db\Exception
     */
    public function actionDeleteAccount()
    {
        $transaction = Yii::$app->db->beginTransaction();

        $user_id = $this->User->user_id;
        if ($user_id) {
            $session = new Sessions();
            $session->user_id = $user_id;
            $session->sess_action = Sessions::ACTION_DELETE;
            $session->save();
        }

        $ret = $this->User->markUserAsDeleted();
        if ($ret['status']) {

            $this->User->save();

            $transaction->commit();

            Yii::$app->user->logout();

            //return $this->redirect('/entrance');

            Yii::$app->response->format = Response::FORMAT_JSON;
            return [
                'status' => true,
                'redirect' => Yii::$app->urlManager->createAbsoluteUrl(['/']),
            ];

        } else {

            $transaction->rollBack();
            return $ret;

        }
    }


    /*********/
    /**
     * Отображает страницу профиля юзера
     * Так же тут происходит обработка смены пароля, имени и тайм-зоны
     * @return mixed
     */
    public function actionProfile()
    {
        /** @var \common\models\Users $User */
        $User = Users::findIdentity($this->User->user_id);

        /** Смена пароля */
        $model = new ChangePasswordForm();
        if (isset($_POST['ChangePasswordStep1'])) {
            if ($model->changePasswordStep1()) {
                Yii::$app->getSession()->setFlash('success', [
                    'message'   => Yii::t('app/flash-messages', 'Profile_ChangePasswordForm_success'),
                    'ttl'       => FLASH_MESSAGES_TTL,
                    'showClose' => true,
                    'alert_action' => 'actionProfile.ChangePasswordForm',
                ]);
            } else {
                Yii::$app->getSession()->setFlash('error', [
                    'message'   => Yii::t('app/flash-messages', 'Profile_ChangePasswordForm_error'),
                    'ttl'       => FLASH_MESSAGES_TTL,
                    'showClose' => true,
                    'alert_action' => 'actionProfile.ChangePasswordForm',
                ]);
            }
            return $this->redirect(['profile']);
        }

        /** Смена имени */
        $model_changename = new ChangeNameForm();
        if ($model_changename->load(Yii::$app->request->post()) && $model_changename->validate()) {
            if ($User->user_name !== $model_changename->user_name) {
                if ($model_changename->changeName()) {
                    Yii::$app->getSession()->setFlash('success', [
                        'message'   => Yii::t('app/flash-messages', 'Profile_ChangeNameForm_success'),
                        'ttl'       => FLASH_MESSAGES_TTL,
                        'showClose' => true,
                        'alert_action' => 'actionProfile.ChangeNameForm',
                    ]);
                } else {
                    Yii::$app->getSession()->setFlash('error', [
                        'message'   => Yii::t('app/flash-messages', 'Profile_ChangeNameForm_error'),
                        'ttl'       => FLASH_MESSAGES_TTL,
                        'showClose' => true,
                        'alert_action' => 'actionProfile.ChangeNameForm',
                    ]);
                }
            }
            return $this->redirect(['profile']);
        }

        /** Смена емейла */
        $model_changeemail = new ChangeEmailForm();
        /*
        if (Yii::$app->request->isAjax && $model_changeemail->load(Yii::$app->request->post())) {
            Yii::$app->response->format = Response::FORMAT_JSON;
            return ActiveForm::validate($model_changeemail);
        }
        if ($model_changeemail->load(Yii::$app->request->post()) && $model_changeemail->validate()) {
            $User = $this->User;
            if ($User->user_email !== $model_changeemail->user_email) {
                if ($model_changeemail->changeEmail()) {
                    Yii::$app->getSession()->setFlash('success', [
                        'message'   => Yii::t('app/flash-messages', 'Profile_ChangeEmailForm_success'),
                        'ttl'       => FLASH_MESSAGES_TTL,
                        'showClose' => true,
                        'alert_action' => 'actionProfile.ChangeEmailForm',
                    ]);
                } else {
                    Yii::$app->getSession()->setFlash('error', [
                        'message'   => Yii::t('app/flash-messages', 'Profile_ChangeEmailForm_error'),
                        'ttl'       => FLASH_MESSAGES_TTL,
                        'showClose' => true,
                        'alert_action' => 'actionProfile.ChangeEmailForm',
                    ]);
                }
            }
            return $this->redirect(['profile']);
        }
        */

        $model_changetimezone = new SetTimeZoneOffsetForm();
        $model_changetimezone->timezone_offset_seconds = $User->static_timezone;
        if ($model_changetimezone->load(Yii::$app->request->post()) && $model_changetimezone->validate()) {
            if ($model_changetimezone->setStaticTimeZone($User)) {
                Yii::$app->getSession()->setFlash('success', [
                    'message'   => Yii::t('app/flash-messages', 'Profile_ChangeTimeZone_success'),
                    'ttl'       => FLASH_MESSAGES_TTL,
                    'showClose' => true,
                    'alert_action' => 'actionProfile.SetTimeZoneOffsetForm',
                ]);
            } else {
                Yii::$app->getSession()->setFlash('error', [
                    'message'   => Yii::t('app/flash-messages', 'Profile_ChangeTimeZone_error'),
                    'ttl'       => FLASH_MESSAGES_TTL,
                    'showClose' => true,
                    'alert_action' => 'actionProfile.SetTimeZoneOffsetForm',
                ]);
            }
            return $this->redirect(['profile']);
        }

        $searchModelSession  = new SessionsSearch();
        $dataProviderSession = $searchModelSession->search(['t1.user_id' => $User->getId()]);

        if (!in_array($User->license_type, [Licenses::TYPE_PAYED_BUSINESS_USER])) {
            $searchModelPayments = new UserPaymentsSearch();
            $dataProviderPayments = $searchModelPayments->search();
        } else {
            $searchModelPayments = null;
            $dataProviderPayments = null;
        }

        /** Вывод страницы настроек профиля */
        return $this->render('profile', [
            'model'                => $model,
            'model_changename'     => $model_changename,
            'model_changeemail'    => $model_changeemail,
            'model_changetimezone' => $model_changetimezone,
            'searchModelSession'   => $searchModelSession,
            'dataProviderSession'  => $dataProviderSession,
            'searchModelPayments'  => $searchModelPayments,
            'dataProviderPayments' => $dataProviderPayments,
        ]);
    }

    /**
     * Change password form
     * @return mixed
     */
    public function actionChangePassword()
    {
        $model = new ChangePasswordForm();
        if ($model->load(Yii::$app->request->post())) {
            if ($user = $model->changePasswordStep2()) {
                if ($user)
                    Yii::$app->session->setFlash('success', [
                        'message'   => Yii::t('app/flash-messages', 'ChangePassword_success'),
                        'ttl'       => FLASH_MESSAGES_TTL,
                        'showClose' => true,
                        'alert_action' => 'actionChangePassword',
                    ]);
                else
                    Yii::$app->session->setFlash('success', [
                        'message'   => Yii::t('app/flash-messages', 'ChangePassword_error'),
                        'ttl'       => FLASH_MESSAGES_TTL,
                        'showClose' => true,
                        'alert_action' => 'actionChangePassword',
                    ]);

                return $this->redirect(['profile']);
            }
        }

        if ($model->findChangeToken(Yii::$app->request->get('token'))) {
            return $this->render('change-password', [
                'model' => $model,
            ]);
        }

        return $this->redirect(['profile']);
    }

    /**
     * @return Response
     */
    public function actionResendConfirm()
    {
        /** @var \common\models\Users $User */
        $User = Users::findIdentity($this->User->user_id);

        $cache_key = 'user-lock-resend-confirm-' . $User->user_id;

        if (!Yii::$app->cache->get($cache_key)) {
            Yii::$app->cache->set($cache_key, time(), Yii::$app->params['timeout_resend_confirm']);

            if ($User->user_status == Users::STATUS_ACTIVE) {

                $User->generatePasswordResetToken();
                if ($User->save() && MailTemplatesStatic::sendByKey(MailTemplatesStatic::template_key_newRegister, $User->user_email, ['UserObject' => $User])) {
                    Yii::$app->session->setFlash('success', [
                        'message' => Yii::t('app/flash-messages', 'ResendConfirm_success'),
                        'ttl' => FLASH_MESSAGES_TTL,
                        'showClose' => true,
                        'alert_action' => 'actionResendConfirm',
                    ]);
                } else {
                    Yii::$app->session->setFlash('error', [
                        'message' => Yii::t('app/flash-messages', 'ResendConfirm_error'),
                        'ttl' => FLASH_MESSAGES_TTL,
                        'showClose' => true,
                        'alert_action' => 'actionResendConfirm',
                    ]);
                }

            }
        } else {
            Yii::$app->session->setFlash('error', [
                'message' => Yii::t('app/flash-messages', 'ResendConfirm_wait_error'),
                'ttl' => FLASH_MESSAGES_TTL,
                'showClose' => true,
                'alert_action' => 'actionResendConfirm',
            ]);
        }
        return $this->goBack((!empty(Yii::$app->request->referrer)
            ? Yii::$app->request->referrer
            : null
        ));
        //return $this->goBack();
    }

    /**
     * @return Response
     */
    public function actionChangeBillingPeriod()
    {
        //var_dump(Yii::$app->request->post());
        $model = New BillingSettingsForm(['billed']);
        if ($model->load(Yii::$app->request->post()) && $model->validate()) {
            $model->changeBilled();
        }
        return $this->redirect(['profile', 'tab' => 2]);
    }

    /**
     * @return Response
     */
    public function actionChangePayType()
    {
        $model = New BillingSettingsForm(['pay_type']);
        if ($model->load(Yii::$app->request->post()) && $model->validate()) {
            $model->changePayType();
        }
        return $this->redirect(['profile', 'tab' => 2]);
    }

    /**
     * For set dynamic timezone for user
     * @return string (json)
     */
    public function actionSetTimezoneOffset()
    {
        Yii::$app->response->format = Response::FORMAT_JSON;

        $model = new SetTimeZoneOffsetForm();
        if ($model->load(['SetTimeZoneOffsetForm' => $_GET], 'SetTimeZoneOffsetForm') && $model->validate()) {
            $ret = $model->setDynamicTimeZone(Users::findIdentity($this->User->user_id));
            return ['status' => $ret];
        }
        return [
            'status' => false,
            'debug'  => $model->getErrors(),
        ];
    }


    /*********/
    /**
     * Отображает страницу с нотификациями юзера
     * @return string
     */
    public function actionNotifications()
    {
        $searchModel = new NotificationsSearch();
        $dataProvider = $searchModel->search();

        return $this->render('notifications', [
            'dataProvider' => $dataProvider,
            'current_count_unread_notifications' => NotificationsSearch::countNewNotifications(),
        ]);
    }

    /**
     * Возвращает джсон строку с количеством новых нотификаций
     * @return array
     */
    public function actionCountNewNotifications()
    {
        Yii::$app->response->format = Response::FORMAT_JSON;

        /** @var \common\models\Users $User */
        $User = $this->User;
        return [
            /* +++ для теста потм убрать */
            //'sess_id'    => Yii::$app->session->getId(),
            //'site_token' => Yii::$app->cache->get(NodeApi::site_token_key()),
            //'user_id'    => Yii::$app->user->isGuest ? null : $this->User->user_id,
            /* --- для теста */
            'count_new_notifications' => (int) NotificationsSearch::countNewNotifications(),
            'count_new_events' => (
            $User->license_type == Licenses::TYPE_PAYED_BUSINESS_ADMIN
                ? (int) ColleaguesReportsSearch::countNewReports()
                : 0 //тут по любому 0
            )
        ];
    }

    /**
     * Помечает все нотифы как прочитанные
     * @return array
     */
    public function actionSetNotificationsAsRead()
    {
        Yii::$app->response->format = Response::FORMAT_JSON;
        if (isset($_POST['ids'])) {
            $_POST['ids'] = array_map('intval', $_POST['ids']);
        } else {
            $_POST['ids'] = null;
        }

        return NotificationsSearch::seatAllAsRead(Yii::$app->user->identity->getId(), $_POST['ids']);
    }

    /**
     * Помечает все репорты как прочитанные
     * @return array
     */
    public function actionSetReportsAsRead()
    {
        Yii::$app->response->format = Response::FORMAT_JSON;
        if (isset($_POST['ids'])) {
            $_POST['ids'] = array_map('intval', $_POST['ids']);
        } else {
            $_POST['ids'] = null;
        }

        return ColleaguesReportsSearch::seatAllAsRead(Yii::$app->user->identity->getId(), $_POST['ids']);
    }


    /*********/
    /**
     * @return string
     */
    public function actionFiles()
    {
        $ShareElementForm = new ShareElementForm();

        $uploadModel = new UploadFilesForm();

        /** @var \common\models\Users $User */
        $User = $this->User;
        $User->setUserColor();

        $proxy = Servers::getProxy();
        if (isset($proxy[0]) && mb_strrpos($proxy[0]->server_url, '/') == mb_strlen($proxy[0]->server_url) - 1) {
            $proxy[0]->server_url = mb_substr($proxy[0]->server_url, 0, mb_strlen($proxy[0]->server_url) - 1);
        }

        return $this->render('filemanager', [
            'Server' => Servers::getSignal(),
            'ServerProxy' => $proxy,
            'ShareElementForm' => $ShareElementForm,
            'site_token' => NodeApi::site_token_key(),
            'uploadModel' => $uploadModel,
            'User' => $User,
        ]);
    }

    /**
     * @return array|bool
     */
    public function actionAddFiles()
    {
        //var_dump($_POST);exit;
        Yii::$app->response->format = Response::FORMAT_JSON;

        if (!isset($_POST['count_node_online'])) {
            $_POST['count_node_online'] = 0;
        } else {
            $_POST['count_node_online'] = intval($_POST['count_node_online']);
        }
        if ($_POST['count_node_online'] <= 0) {
            return [
                'status' => false,
                'info'   => "Can't upload file while all nodes is offline.",
            ];
        }

        $model = new UploadFilesForm();

        $model->uploadedFile = UploadedFile::getInstance($model, 'uploadedFile');
        $model->target_folder_id = isset($_POST['target_folder_id']) ? intval($_POST['target_folder_id']) : -1;
        if ($model->uploadedFile) {
            return $model->processUpload();
        }
        return false;

    }

    /**
     * @return array
     */
    public function actionRestorePatch()
    {
        Yii::$app->response->format = Response::FORMAT_JSON;
        $model = new RestorePatchApi(['event_id']);
        if ($model->load(['RestorePatchApi' => $_POST], 'RestorePatchApi') && $model->validate()) {
            return $model->restorePatch(Users::findIdentity($this->User->user_id), true);
        }
        return [
            'status' => false,
            'info'   => 'System error.',
            'debug'  => $model->getErrors(),
        ];
    }

    /**
     * Send share link to email
     * @return mixed
     */
    public function actionShareSendToEmail()
    {
        Yii::$app->response->format = Response::FORMAT_JSON;
        $model = new ShareElementForm();
        if ($model->load(['ShareElementForm' => $_POST], 'ShareElementForm') && $model->validate()) {
            $UserFile = UserFiles::findOne(['share_hash' => $model->share_hash]);
            /** @var \common\models\Users $user */
            $user = $this->User;
            if ($UserFile && $UserFile->user_id == $user->user_id) {
                $UserTo = Users::findByEmail($model->share_email);
                /*
                Yii::$app->session->setFlash('success', [
                    'message'   => Yii::t('app/flash-messages', 'ShareSendToEmail_success'),
                    'ttl'       => FLASH_MESSAGES_TTL,
                    'showClose' => true,
                    'alert_action' => 'actionShareSendToEmail',
                ]);
                */
                MailTemplatesStatic::sendByKey(MailTemplatesStatic::template_key_ShareSendToEmail, $model->share_email, ['UserObject' => $UserTo, 'UserFileObject' => $UserFile]);
                return ['status' => true, 'info' => "OK"];
            }
            return ['status' => false, 'info' => 'Share not found.'];
        }
        return ['status' => false, 'info' => 'Validation error.'];
    }

    /**
     * Акшен для вступления в коллаборацию по инвайт приглашению
     * @return Response
     */
    public function actionAcceptCollaboration()
    {
        /* если все таки захотим инвайт+джойн то тут урать первый ретурн */
        //return $this->redirect(['index']);
        /* */
        if (isset($_GET['colleague_id'])) {
            $model = new ShareElementForm(['colleague_id']);
            //var_dump($model->load(['ShareElementForm' => $_GET]));
            //exit;
            if ($model->load(['ShareElementForm' => $_GET]) && $model->validate()) {
                $ret = $model->acceptCollaboration();
                if ($ret['status']) {
                    Yii::$app->session->setFlash('success', [
                        'message'   => Yii::t('app/flash-messages', 'YourJoinIsAcceptedYouAreQueuedToAdd'),
                        'ttl'       => FLASH_MESSAGES_TTL,
                        'showClose' => true,
                        'alert_action' => 'actionAcceptCollaboration',
                        'type' => 'success',
                    ]);
                    if (isset($ret['data']['license_restriction'], $ret['data']['license_restriction_type'])) {
                        Yii::$app->session->setFlash('success2', [
                            'message'   => Yii::t('app/flash-messages', $ret['data']['license_restriction']),
                            'ttl'       => FLASH_MESSAGES_TTL,
                            'showClose' => true,
                            'alert_action' => 'actionAcceptCollaboration2',
                            'alert_id' => uniqid(),
                            'type' => $ret['data']['license_restriction_type'],
                        ]);
                    }
                    if (isset($ret['redirect'])) {
                        return $this->redirect($ret['redirect']);
                    } else {
                        return $this->redirect(['files']);
                    }
                } else {
                    if (!isset($ret['hidden_info'])) {
                        Yii::$app->session->setFlash('error', [
                            'message' => Yii::t('app/flash-messages', (isset($ret['info']) ? $ret['info'] : 'SomeErrorOnJoinCollaboration')),
                            'ttl' => FLASH_MESSAGES_TTL,
                            'showClose' => true,
                            'alert_action' => 'actionAcceptCollaboration',
                        ]);
                    }
                    if (isset($ret['redirect'])) {
                        return $this->redirect($ret['redirect']);
                    } else {
                        return $this->redirect(['files']);
                    }
                }
            } else {
                //var_dump($model->getErrors());
                Yii::$app->session->setFlash('error', [
                    'message'   => Yii::t('app/flash-messages', 'SomeErrorOnJoinCollaboration'),
                    'ttl'       => FLASH_MESSAGES_TTL,
                    'showClose' => true,
                    'alert_action' => 'actionAcceptCollaboration',
                ]);
                return $this->refresh('#some-error-on-join-collaboration');
            }
        }
        //return $this->redirect(['index']);
    }

    /**
     * Акшен для выхода из коллаборации (вызывается коллаборантом-юзером)
     * @return array
     */
    public function actionLeaveCollaboration()
    {
        Yii::$app->response->format = Response::FORMAT_JSON;
        $model = new ShareElementForm();
        if ($model->load(['ShareElementForm' => $_POST], 'ShareElementForm') && $model->validate()) {
            return $model->leaveCollaboration();
        }
        return [
            'status' => false,
            'info'   => 'System error.',
            'debug'  => $model->getErrors(),
        ];
    }

    /**
     * @param integer $colleague_id
     * @return array
     */
    public function actionResendInvite($colleague_id)
    {
        Yii::$app->response->format = Response::FORMAT_JSON;

        $colleague_id = intval($colleague_id);
        $UserColleague = UserColleagues::findOne(['colleague_id' => $colleague_id]);
        if ($UserColleague) {


            if ($UserColleague->user_id) {
                return [
                    'status' => false,
                    'info' => 'Colleague already invited.',
                ];
            }

            $last_invite_time = strtotime($UserColleague->colleague_invite_date);
            if ($last_invite_time > time() - UserColleagues::REPEAT_INVITE_PERIOD_AFTER) {

                $diff = $last_invite_time - (time() - UserColleagues::REPEAT_INVITE_PERIOD_AFTER);

                return [
                    'status' => false,
                    'info' => "Too many tries. Try in " . Functions::getHumanReadableLeftTime($diff) . ".",
                ];
            }

            $UserColleague->colleague_invite_date = date(SQL_DATE_FORMAT);
            $UserColleague->save();

            MailTemplatesStatic::sendByKey(MailTemplatesStatic::template_key_CollaborationInvite, $UserColleague->colleague_email, [
                'UserColleagueObject'      => $UserColleague,
                'UserObject'               => null, //$User_for_Colleague ? $User_for_Colleague : null,
                'UserOwner_email'          => $this->User->user_email,
                'UserOwner_name'           => $this->User->user_name,
                'invite_colleague_message' => '',
            ]);

            return [
                'status' => true,
                'info' => 'Invite sent.',
            ];

        } else {
            return [
                'status' => false,
                'info' => 'Colleague not found.',
            ];
        }
    }

    /**
     * Акшен для смены прав юзера в коллаборации
     * @return array
     */
    public function actionChangeCollaborationAccess()
    {
        Yii::$app->response->format = Response::FORMAT_JSON;

        /** @var \common\models\Users $User */
        /*
        $User = $this->User;
        //var_dump($User);exit;
        if ($User->license_type == Licenses::TYPE_FREE_DEFAULT) {
            return [
                'status' => false,
                'info'   => 'You license is not allow collaborations.',
            ];
        }
        */

        $_POST['owner_user_id'] = Yii::$app->user->identity->getId();
        $model = new ShareElementForm(['file_uuid', 'access_type', 'action', 'owner_user_id']);
        if ($model->load(['ShareElementForm' => $_POST], 'ShareElementForm') && $model->validate()) {
            return $model->changeCollaboration();
        }
        return [
            'status' => false,
            'info'   => 'System error.',
            'debug'  => $model->getErrors(),
        ];
    }

    /**
     * Акшен для отмены коллаборации на папку (исключения всех коллаборантов)
     * @return array
     */
    public function actionCancelCollaboration()
    {
        Yii::$app->response->format = Response::FORMAT_JSON;
        $model = new ShareElementForm();
        if ($model->load(['ShareElementForm' => $_POST], 'ShareElementForm') && $model->validate()) {
            return $model->cancelCollaboration();
        }
        return [
            'status' => false,
            'info'   => 'System error.',
            'debug'  => $model->getErrors(),
        ];
    }


    /*********/
    /**
     * Display list of devices
     * @return mixed
     */
    public function actionDevices()
    {
        /** @var \common\models\Users $User */
        $User = $this->User;
        $searchModel = new UserNodeSearch();
        $dataProvider = $searchModel->search(['user_id' => $User->user_id]);

        return $this->render('devices', [
            'User'         => $User,
            'Server'       => Servers::getSignal(),
            'site_token'   => NodeApi::site_token_key(),
            'dataProvider' => $dataProvider,
            //'allNodes'     => $searchModel->getAll(),
        ]);
    }

    /**
     * Display log for devices
     * @return mixed
     */
    public function actionDevicesLog()
    {
        if (isset($_GET['node_id'])) {
            $_GET['node_id'] = intval($_GET['node_id']);
            $UserNode = UserNode::findOne([
                'user_id' => $this->User->user_id,
                'node_id' => $_GET['node_id'],
            ]);
            if ($UserNode) {
                $SessionsSearch  = new SessionsSearch();
                $dataProvider = $SessionsSearch->search2([
                    'user_id' => $this->User->user_id,
                    'node_id' => $_GET['node_id'],
                ], 5);

                return $this->renderPartial('devices_list_item_manage_node', [
                    'User' => $this->User,
                    'SessionsSearch' => $SessionsSearch,
                    'dataProvider' => $dataProvider,
                    'UserNode' => $UserNode,
                ]);
            } else {
                return "Error: User access error. Not exist node with this node_id for user";
            }
        } else {
            return "Error";
        }
    }

    /**
     * Акшен помечает ноду как скрытую,
     * до того момента пока она не изменит сама свой статус
     * @return array
     */
    public function actionSetNodeHidden()
    {
        Yii::$app->response->format = Response::FORMAT_JSON;
        if (isset($_GET['node_id'])) {
            $_GET['node_id'] = intval($_GET['node_id']);

            $model = new NodeApi(['node_id']);
            if (!$model->load(['NodeApi' => $_GET]) || !$model->validate()) {
                return [
                    'status' => false,
                    'info' => 'Error'
                ];
            }

            $ret = $model->hideNode($this->User);
            if (isset($ret['result']) && $ret['result'] == 'success') {
                return [
                    'status'  => true,
                    'node_id' => $model->node_id,
                    'info'    => 'Success.',
                ];
            } else {
                return [
                    'status' => false,
                    'info' => $ret['info'],
                ];
            }
        } else {
            return ['status' => false, 'info' => 'Error'];
        }
    }

    /**
     * Акшен для логаута или вайпа ноды
     * @return string
     */
    public function actionLogoutAndWipe()
    {
        Yii::$app->response->format = Response::FORMAT_JSON;
        if (isset($_POST['action_type'], $_POST['target_node_id'])) {


            $model = new NodeApi(['target_node_id', 'action_type']);
            if (!$model->load(['NodeApi' => $_POST]) || !$model->validate()) {
                return [
                    'result'  => "error",
                    'errcode' => NodeApi::ERROR_WRONG_DATA,
                    'info'    => $model->getErrors()
                ];
            }

            $User = Users::findIdentity($this->User->user_id);
            $UserNode = NodeApi::registerNodeFM($User);
            //var_dump()

            return $model->execute_remote_action($UserNode, $User);
        } else {
            //var_dump($_POST);
            return [
                'result'  => "error",
                'errcode' => NodeApi::ERROR_WRONG_DATA,
                'info'    => "No data present",
            ];
        }
    }

    /**
     * @return string
     */
    public function actionConferences()
    {
        $searchModel = new ConferencesSearch();
        $dataProviderConferences = $searchModel->search($this->User->user_id);
        $ParticipantAddForm = new ParticipantAddForm($this->User);

        return $this->render('/conferences/conferences', [
            'User'                    => $this->User,
            'ConferenceAddForm'       => new ConferenceAddForm(),
            'ParticipantAddForm'      => $ParticipantAddForm,
            'dataProviderConferences' => $dataProviderConferences,
            'is_business_admin'       => $this->User->license_type == Licenses::TYPE_PAYED_BUSINESS_ADMIN,
            'license_count_info'      => UserLicenses::getLicenseCountInfoForUser($this->User->user_id),
        ]);
    }

    /*********/
    /**
     * Акшен для отметки того что алерт-диалог
     * с конкретным ИД был закрыт юзером через крестик.
     * Что бы не показывать ему его снова.
     * @return Response
     */
    public function actionAlertDialogs()
    {
        Yii::$app->response->format = Response::FORMAT_JSON;
        $model = new DynamicModel(['dialog', 'alert_id', 'show']);
        $model->addRule(['dialog', 'alert_id', 'show'], 'required');
        $model->addRule('dialog', 'string', ['max'=>255]);
        $model->addRule('alert_id', 'string', ['max'=>255]);
        $model->addRule('show', 'boolean');
        //var_dump($_POST);
        if ($model->load(['AlertDialogs' => $_POST], 'AlertDialogs') && $model->validate()) {
            if ($model->dialog == 'alert_confirm_email') {
                $user = Users::findIdentity($this->User->user_id);
                $user->user_closed_confirm = Users::CONFIRM_CLOSED;
                $user->save();
            }

            Yii::$app->session->set($model->dialog, (boolean)$model->show);
            return [
                'status'   => true,
                'alert_id' => $model->alert_id,
                'dialog'   => $model->dialog,
            ];
        }
        return [
            'status' => false,
            'debug'  => $model->getErrors(),
        ];
    }

    /**
     * Акшен для сохранения скриншота и текста алерт-сообщений
     * котороые видит юзер в БД. Что бы в админке можно было
     * анализировать эти данные по юзеру
     * @return array
     */
    public function actionRegisterAlertData()
    {
        //https://yiiframework.ru/forum/viewtopic.php?t=32295
        // https://makitweb.com/take-screenshot-of-webpage-with-html2canvas/
        //https://yiiframework.ru/forum/viewtopic.php?t=36108
        //var_dump($_POST['screen']); exit;
        Yii::$app->response->format = Response::FORMAT_JSON;

        $model = new LogAlertDataForm();
        if ($model->load(['LogAlertDataForm' => $_POST]) && $model->validate()) {
            return $model->saveAlertData($this->User);
        }

        return [
            'status' => true,
            'info'   => $model->getErrors(),
        ];
    }

    /**
     * Акшен отдает джсон строку с информацией о текущей лицензии юзера
     * @return array
     */
    public function actionGetUserLicense()
    {
        Yii::$app->response->format = Response::FORMAT_JSON;

        return [
            'user_license' => $this->User->license_type,
        ];
    }




    /** ********************** DEPRECATED ACTIONS ********************** */
    /**
     * DEPRECATED
     * Функция для получения капчи в форму логина или в форму регистрации
     * @return string
     */
    public function actionGetCaptcha()
    {
        /** It's deprecated method */
        return $this->redirect('/');
        /** It's deprecated method */

        //sleep(10);
        Yii::$app->response->format = Response::FORMAT_JSON;
        //Yii::$app->language = "ru-RU";
        //Yii::$app->sourceLanguage = "ru";

        $model = new DynamicModel(['action', 'reCaptcha']);
        $model->addRule('action', 'required');
        $model->addRule('action', 'in', ['range'=>['login', 'signup', 'signup2', 'contact', 'reset']]);
        if ($model->load(['data' => Yii::$app->request->post()], 'data') && $model->validate()) {

            if ($model->action == 'login') {
                $CacheKey = 'LoginCacheKey';
                $CountNoCaptcha = 'LoginCountNoCaptcha';
                //$model_captcha = $this->model_login;
            } elseif (in_array($model->action, ['signup', 'signup2'])) {
                $CacheKey = 'RegisterCacheKey';
                $CountNoCaptcha = 'RegisterCountNoCaptcha';
                //$model_captcha = $this->model_signup;
            } elseif ($model->action == 'contact') {
                $CacheKey = 'ContactCacheKey';
                $CountNoCaptcha = 'ContactCountNoCaptcha';
            } else {
                $CacheKey = 'ResetPasswordCacheKey';
                $CountNoCaptcha = 'ResetPasswordCountNoCaptcha';
            }

            if (isset(Yii::$app->params[$CacheKey])) {
                $cnt = Yii::$app->cache->get(Yii::$app->params[$CacheKey]);
                if (!$cnt) {
                    $cnt = 1;
                    Yii::$app->cache->set(Yii::$app->params[$CacheKey], $cnt);
                }
            } else { $cnt = 1; }

            if (($cnt > intval(Preferences::getValueByKey($CountNoCaptcha))) /*|| ($model->action == 'reset')*/) {

                $reCaptchaEvalJs_sessionkey = 'reCaptchaEvalJs' . Yii::$app->language;
                $reCaptchaEvalJs = Yii::$app->session->get($reCaptchaEvalJs_sessionkey);
                if (!$reCaptchaEvalJs) {
                    $reCaptchaEvalJs = base64_encode(file_get_contents(Yii::$app->params['reCaptchaApiLink'].Yii::$app->language));
                    //$reCaptchaEvalJs = base64_encode(file_get_contents(Yii::$app->params['reCaptchaApiLink'].Yii::$app->language).";".'var recaptchaCallback = function(response){jQuery("#loginform-recaptcha").val(response);};var recaptchaExpiredCallback = function(){jQuery("#loginform-recaptcha").val("");}; alert(3333); jQuery("#form-login").yiiActiveForm([{"id":"loginform-recaptcha","name":"reCaptcha","container":".field-loginform-recaptcha","input":"#loginform-recaptcha","error":".help-block.help-block-error","validate":function (attribute, value, messages, deferred, $form) {(function(messages){if(!grecaptcha.getResponse()){messages.push("Необходимо заполнить «Re Captcha».");}})(messages);}},], []); alert(44444);');
                    Yii::$app->session->set($reCaptchaEvalJs_sessionkey, $reCaptchaEvalJs);
                }

                $f = new ActiveForm();
                return [
                    'html' => base64_encode(
                        $f->field(
                            ($model->action == 'login')
                                ? new LoginForm()
                                : (
                            ($model->action == 'signup')
                                ? new SignupForm()
                                : (
                            ($model->action == 'signup2')
                                ? new SignupForm2()
                                : (
                            ($model->action == 'contact')
                                ? new SupportForm()
                                : new PasswordResetRequestForm()
                            )
                            )
                            )
                            , 'reCaptcha')
                            ->widget(
                                \himiklab\yii2\recaptcha\ReCaptcha::className(),
                                [
                                    'siteKey' => Preferences::getValueByKey('reCaptchaPublicKey'),
                                    //'theme' => 'dark',
                                    'widgetOptions' => (isset($_POST['compact'])) ? ['data-size' => 'compact'] : [],
                                ]
                            )->label(false)
                    ),
                    'jseval' => $reCaptchaEvalJs
                ];
            } else { return ['html' => "", 'jseval' => ""]; }
        } else { return serialize($model->getErrors()); }
    }

    /**
     * DEPRECATED
     * Старый метод для получения списка дирректорий коллаборации
     * @return string
     */
    public function actionFolderSelect()
    {
        return '';
        Yii::$app->response->format = Response::FORMAT_JSON;
        $user_id = $this->User->user_id;
        if (isset($_GET['operation'], $_GET['node_id'])) {
            $data['tree'] = $_GET;
            $data['tree']['user_id'] = $user_id;
            $model = new JsTreeMy();
            if ($model->load($data, 'tree')) {
                return $model->processTree();
            }
        } else {
            //return $this->render('devices_light');
            return null;
        }
    }
}