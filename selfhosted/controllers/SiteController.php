<?php
namespace selfhosted\controllers;

use Yii;
use yii\filters\AccessControl;
use selfhosted\components\SController;
use yii\web\BadRequestHttpException;
use yii\base\InvalidParamException;
use yii\filters\VerbFilter;
use yii\base\DynamicModel;
use yii\web\HttpException;
use yii\web\Response;
use yii\bootstrap\ActiveForm;
use common\models\SelfHostUsers;
use common\models\BadLogins;
use selfhosted\models\forms\LoginForm;
use selfhosted\models\forms\SignupForm;
use selfhosted\models\forms\SupportForm;
use selfhosted\models\forms\ResetPasswordForm;
use selfhosted\models\forms\PasswordResetRequestForm;

/**
 * Site controller
 *
 * @property \selfhosted\models\forms\LoginForm $model_login
 * @property \selfhosted\models\forms\SupportForm $model_contact
 */
class SiteController extends SController
{
    public $model_login;
    public $model_contact;

    /**
     * @inheritdoc
     */
    public function init()
    {
        parent::init(); // TO-DO: Change the autogenerated stub
        $this->model_login  = new LoginForm();
        $this->model_contact = new SupportForm();
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'rules' => [
                    [
                        'actions' => [
                            'index',
                            'login',
                            'support',
                            'login-by-token',
                            'signup',
                            'reset-change-password',
                            'request-password-reset',
                            'error',
                        ],
                        'allow' => true,
                        'roles' => ['?'],
                    ],
                    [
                        'actions' => [
                            'index',
                            'logout',
                            'support',
                            'error',
                        ],
                        'allow' => true,
                        'roles' => ['@'],
                    ],
                ],
                'denyCallback' => function() {
                    if ($this->SelfHostUser) {
                        return $this->redirect(['user/profile']);
                    }
                }
            ],
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'logout' => ['post', 'get'],
                ],
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
        ];
    }

    /**
     * @return string
     */
    public function actionIndex()
    {
        if (!$this->SelfHostUser) {
            return $this->render('index', [
                'SelfHostUser' => $this->SelfHostUser,
                'model' => $this->model_login,
                'form_signup' => new SignupForm(),
            ]);
        } else {
            return $this->redirect(['user/profile']);
        }
    }

    /**
     * Logs in a user.
     * @return string|\yii\web\Response;
     * @throws HttpException
     */
    public function actionLogin()
    {
        if ((Yii::$app->request->post())) {
            try {
                if ($this->model_login->load(Yii::$app->request->post()) && $this->model_login->validate()) {

                    if ($this->model_login->login()) {

                        return $this->redirect(['user/profile']);

                    } else {

                        throw new HttpException(400, 'Failed save data.');

                    }

                } else {

                    $cnt = Yii::$app->cache->get(Yii::$app->params['LoginCacheKey']);
                    if (!$cnt) {
                        $cnt = 1;
                    } else {
                        $cnt++;
                    }
                    Yii::$app->cache->set(Yii::$app->params['LoginCacheKey'], $cnt);

                }
            } catch (Yii\base\Exception $e) {
                throw new HttpException(400, 'Wrong data transmitted.');
            }
        }

        return $this->render('index', [
            'SelfHostUser' => $this->SelfHostUser,
            'model' => $this->model_login,
            'form_signup' => new SignupForm(),
        ]);
    }

    /**
     * @return \yii\web\Response
     */
    public function actionLogout()
    {
        Yii::$app->user->logout();

        return $this->redirect(['/']);
    }

    /**
     * @return \yii\web\Response
     */
    public function actionLoginByToken()
    {
        $model = new DynamicModel(['token']);
        $model->addRule('token', 'required');
        $model->addRule('token', 'string', ['min'=>6, 'max'=>255]);

        $flash_message = 'Signup failed';
        $flash_type = 'error';

        if ($model->load(['LoginByToken' => $_GET], 'LoginByToken') && $model->validate()) {
            if (SelfHostUsers::isLoginTokenValid($model->token)) {
                Yii::$app->user->logout();
                $user = SelfHostUsers::findByPasswordResetToken($model->token, false);
                //var_dump($user); exit;
                if ($user) {
                    $user->removePasswordResetToken();
                    $user->shu_status = SelfHostUsers::STATUS_ACTIVE;
                    if ($user->save()) {

                        if (isset($_GET['free']) && $_GET['free']) {
                            $flash_message = 'Ссылка на приложение отправлена на емейл';
                        } else {
                            $flash_message = 'Ожидайте, с вами свяжется наш саппорт';
                        }
                        $flash_type = 'success';
                        Yii::$app->user->login($user, 0);

                    } else {
                        $flash_message = 'Database error';
                    }
                } else {
                    $flash_message = 'Token not found';
                }
            } else {
                $flash_message = 'Invalid token';
            }
        } else {
            $flash_message = 'Token not presented';
        }

        //var_dump($flash_message); exit;
        Yii::$app->session->setFlash($flash_type, [
            'message'   => Yii::t('app/flash-messages', $flash_message),
            'ttl'       => FLASH_MESSAGES_TTL,
            'showClose' => true,
            'alert_action' => 'actionSignupByToken',
        ]);
        if ($flash_type == 'success') {
            return $this->redirect(['user/profile']);
        } else {
            return $this->redirect(['/']);
        }
    }

    /**
     * @return array
     * @throws BadRequestHttpException
     */
    public function actionSignup()
    {
        $model = new SignupForm();

        if (Yii::$app->request->isAjax && $model->load(Yii::$app->request->post())) {
            Yii::$app->response->format = Response::FORMAT_JSON;
            return ActiveForm::validate($model);
        }

        if ($model->load(Yii::$app->request->post())) {

            /* IP */
            $ip = null;
            $ip = Yii::$app->request->getUserIP();
            if (!$ip) { $ip = isset($_SERVER['REMOTE_ADDR']) ? $_SERVER['REMOTE_ADDR'] : null; }
            if (!$ip) { $ip = '127.0.0.1'; }

            /* тут проверка что не было лока по ИП для метода логина по емейл + пароль */
            /* это будет метод, который проверяет нет ли лока для данного ИП */
            $bl_ret = BadLogins::checkIsIpLocked($ip, BadLogins::TYPE_LOCK_VALIDATE);
            if ($bl_ret['status']) {
                Yii::$app->response->format = Response::FORMAT_JSON;
                return [
                    'result'  => "error",
                    'errcode' => "LOCKED_CAUSE_TOO_MANY_BAD_TRIES",
                    'info'    => $bl_ret['info'],
                    'data'    => $bl_ret['data'],
                ];
            }

            /**/
            if ($model->validate()) {

                $cnt = Yii::$app->cache->get(Yii::$app->params['RegisterCacheKey']);
                if (!$cnt) {
                    $cnt = 1;
                } else {
                    $cnt++;
                }
                Yii::$app->cache->set(Yii::$app->params['RegisterCacheKey'], $cnt);

                $ret = $model->signup();
                if ($ret['user']) {

                    if (isset($ret['free']) && $ret['free']) {
                        $flash_message = Yii::t('app/flash-messages', 'Email_with_link_for_download_was_sent.');
                    } else {
                        $flash_message = Yii::t('app/flash-messages', 'Please_wait_Support_will_contact_you_soon');
                    }
                    Yii::$app->session->setFlash('success', [
                        'message'   => Yii::t('app/flash-messages', $flash_message),
                        'ttl'       => FLASH_MESSAGES_TTL,
                        'showClose' => true,
                        'alert_action' => 'actionSignupByToken',
                    ]);

                    Yii::$app->user->login($ret['user'], 0);
                    return $this->redirect(['user/profile']);

                } else {
                    //throw new BadRequestHttpException('Wrong form data2');
                    throw new HttpException(400, 'Failed save data.');
                }

            } else {

                //throw new BadRequestHttpException('Wrong form data');
                BadLogins::setDataForIP($ip, BadLogins::TYPE_LOCK_VALIDATE);
                return ['/'];

            }
        }

        return $this->redirect(['/']);
    }

    /**
     * Requests password reset.
     * @return array|Response
     * @throws BadRequestHttpException
     */
    public function actionRequestPasswordReset()
    {
        $model = new PasswordResetRequestForm();

        $cnt = Yii::$app->cache->get(Yii::$app->params['ResetPasswordCacheKey']);
        if (!$cnt) { $cnt = 1; } else { $cnt++; }
        Yii::$app->cache->set(Yii::$app->params['ResetPasswordCacheKey'], $cnt);

        if (Yii::$app->request->isAjax && $model->load(Yii::$app->request->post())) {
            Yii::$app->response->format = Response::FORMAT_JSON;
            return ActiveForm::validate($model);
        }

        if ($model->load(Yii::$app->request->post()) && $model->validate()) {

            if ($model->sendEmail()) {
                Yii::$app->session->setFlash('success', [
                    'message'   => Yii::t('forms/reset-password-form', 'Instructions_recovery_sent'),
                    'ttl'       => FLASH_MESSAGES_TTL,
                    'showClose' => true,
                    'alert_action' => 'actionRequestPasswordReset',
                ]);
                return $this->redirect('/site?request-reset-sent');
            } else {
                /*
                Yii::$app->session->setFlash('error', [
                    'message'   => Yii::t('app/flash-messages', 'RequestPasswordReset_error'),
                    'ttl'       => FLASH_MESSAGES_TTL,
                    'showClose' => true,
                    'alert_action' => 'actionRequestPasswordReset',
                ]);
                */
                return $this->redirect('/site?reset-password-error');
            }
        }

        return $this->redirect('/site?reset-password-error');
    }

    /**
     * Resets password.
     *
     * @param string $token
     * @return mixed
     * @throws BadRequestHttpException
     */
    public function actionResetChangePassword($token)
    {
        try {
            $model = new ResetPasswordForm($token);
        } catch (InvalidParamException $e) {
            throw new BadRequestHttpException($e->getMessage());
        }

        if ($model->load(Yii::$app->request->post()) && $model->validate() && $model->resetPassword()) {
            Yii::$app->session->setFlash('success', [
                'message'   => Yii::t('app/flash-messages', 'ResetChangePassword_success'),
                'ttl'       => FLASH_MESSAGES_TTL,
                'showClose' => true,
                'alert_action' => 'actionResetChangePassword',
            ]);

            return $this->goHome();
        }

        return $this->render('reset-change-password', [
            'model' => $model,
        ]);
    }

    /**
     * Displays contact page.
     * @return string|Response
     * @throws BadRequestHttpException
     */
    public function actionSupport()
    {
        if ($this->model_contact->load(Yii::$app->request->post())) {

            if ($this->model_contact->validate()) {

                $cnt = Yii::$app->cache->get(Yii::$app->params['ContactCacheKey']);
                if (!$cnt) {
                    $cnt = 1;
                } else {
                    $cnt++;
                }
                Yii::$app->cache->set(Yii::$app->params['ContactCacheKey'], $cnt);

                if ($this->model_contact->sendEmail()) {
                    Yii::$app->session->setFlash('success', [
                        'message' => Yii::t('app/flash-messages', 'Support_success'),
                        'ttl' => FLASH_MESSAGES_TTL,
                        'showClose' => true,
                        'alert_action' => 'actionSupport',
                    ]);
                } else {
                    Yii::$app->session->setFlash('error', [
                        'message' => Yii::t('app/flash-messages', 'Support_error'),
                        'ttl' => FLASH_MESSAGES_TTL,
                        'showClose' => true,
                        'alert_action' => 'actionSupport',
                    ]);
                }

                return $this->refresh();

            } else {

                throw new BadRequestHttpException('Wrong form data');

            }

        } else {
            return $this->render('support', [
                'model' => $this->model_contact,
            ]);
        }
    }
}
